let Joi,Post,User;_065‍.x([["register",()=>register],["login",()=>login],["check",()=>check],["logout",()=>logout]]);_065‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_065‍.w("../../models/post",[["default",["Post"],function(v){Post=v}]]);_065‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);



// POST / api / auth / register {
//     username : 'velopert',
//     password: 'mypass123'
// }

       const register = async (ctx) => {
  //회원가입
  //Request Body 검증하기
  const schema = Joi.object().keys({
    username: Joi.string().alphanum().min(3).max(20).required(),
    password: Joi.string().required(),
  });
  const result = schema.validate(ctx.request.body);
  if (result.error) {
    ctx.status = 400;
    ctx.body = result.error;
    return;
  }

  const { username, password } = ctx.request.body;
  try {
    //username이 이미 존재하는지 확인
    const exists = await User.findByUsername(username);
    if (exists) {
      ctx.status = 409; //Conflict
      return;
    }
    const user = new User({
      username,
    });
    await user.setPassword(password); //비밀번호 설정
    await user.save();
    ctx.body = user.serialize();
  } catch (e) {
    ctx.throw(500, e);
  }
};

       const login = async (ctx) => {
  //로그인
};

       const check = async (ctx) => {
  //로그인 상태 확인
};

       const logout = async (ctx) => {
  //로그아웃
};
