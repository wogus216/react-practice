let Post,mongoose;_0f4‍.x([["checkObjectId",()=>checkObjectId],["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_0f4‍.w("../../models/Post",[["default",["Post"],function(v){Post=v}]]);_0f4‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);


const { ObjectId } = mongoose.Types;

       const checkObjectId = (ctx, next) => {
  const { id } = ctx.params;
  if (!ObjectId.isVaild(id)) {
    ctx.status = 400; // Bad Request
    return;
  }
  return next();
};
// POST / api/ posts{
//   title : '제목',
//   body: '내용',
//   tags: ['태그1','태그2']
// }

       const write = async (ctx) => {
  const { title, body, tags } = ctx.request.body;
  const post = new Post({
    title,
    body,
    tags,
  });
  try {
    await post.save();
    ctx.body = post;
  } catch (e) {
    ctx.throw(500, e);
  }
};
// GET/api/posts
       const list = async (ctx) => {
  try {
    const posts = await Post.find().exec();
    ctx.body = posts;
  } catch (e) {
    ctx.throw(500, e);
  }
};

// GET/api/posts/:id
       const read = async (ctx) => {
  const { id } = ctx.params;
  try {
    const post = await Post.findById(id).exec();
    if (!post) {
      ctx.status = 404; // Not Found
      return;
    }
    ctx.body = post;
  } catch (e) {
    ctx.throw(500, e);
  }
};
// DELETE/api/posts/:id
       const remove = async (ctx) => {
  const { id } = ctx.params;
  try {
    await Post.findByIdAndRemove(id).exec();
    ctx.status = 204; //No Content(성공하기는 했지만 응답할 데이터는 없음)
  } catch (e) {
    ctx.throw(500, e);
  }
};

// PATCH / api/ posts{
//   title : '수정',
//   body: '수정 내용',
//   tags: ['수정','태그']
// }

       const update = async (ctx) => {
  const { id } = ctx.params;
  try {
    const post = await Post.findByIdAndUpdate(id, ctx.request.body, {
      new: true, // 이 값을 설정하면 업데이트된 데이터를 반환합니다.
      //false일 때는 업데이트되기전의 데이터를 반환합니다.
    }).exec();
    if (!post) {
      ctx.status = 404;
      return;
    }
    ctx.body = post;
  } catch (e) {
    ctx.throw(500, e);
  }
};
